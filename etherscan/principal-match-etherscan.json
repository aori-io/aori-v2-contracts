{"language":"Solidity","sources":{"contracts/zones/PrincipalMatch.sol":{"content":"pragma solidity 0.8.24;\n\nimport {IZone} from \"../interfaces/IZone.sol\";\nimport {IClearing} from \"../interfaces/IClearing.sol\";\nimport {ClearingUtils} from \"../libs/ClearingUtils.sol\";\n\nstruct Instruction {\n    address to;\n    uint256 value;\n    bytes data;\n}\n\ncontract PrincipalMatch is IZone {\n    /*//////////////////////////////////////////////////////////////\n                                 STATE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name = \"PrincipalMatch\";\n    address public immutable clearing;\n    address public manager;\n\n    /*//////////////////////////////////////////////////////////////\n                              CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _clearing, address _manager) {\n        clearing = _clearing;\n        manager = _manager;\n    }\n\n    function handleSettlement(\n        IClearing.SignedOrder[] memory orders,\n        bytes memory extraData\n    ) external {\n        /*//////////////////////////////////////////////////////////////\n                                    VALIDATION\n        //////////////////////////////////////////////////////////////*/\n\n        require(\n            msg.sender == clearing,\n            \"PrincipalMatch: Only clearing can call this function\"\n        );\n\n        (Instruction[] memory instructions, bytes memory witness) = abi.decode(\n            extraData,\n            (Instruction[], bytes)\n        );\n\n        require(\n            ClearingUtils.verifySequenceSignature(\n                orders,\n                abi.encode(instructions),\n                witness,\n                manager\n            ),\n            \"PrincipalMatch: Invalid signature\"\n        );\n\n        /*//////////////////////////////////////////////////////////////\n                                     ESCROW\n        //////////////////////////////////////////////////////////////*/\n\n        for (uint256 i = 0; i < orders.length; i++) {\n            IClearing(clearing).escrow(orders[i]);\n        }\n\n        /*//////////////////////////////////////////////////////////////\n                                PERFORM ACTIONS\n        //////////////////////////////////////////////////////////////*/\n\n        for (uint256 i = 0; i < orders.length; i++) {\n            if (orders[i].extraData.length > 0) {\n                // Decode instructions from order.extraData and execute\n                Instruction[] memory instructions = abi.decode(\n                    orders[i].extraData,\n                    (Instruction[])\n                );\n                _execute(instructions);\n            }\n        }\n\n        // Do execution\n        if (extraData.length > 0) {\n            _execute(instructions);\n        }\n\n        /*//////////////////////////////////////////////////////////////\n                                    RELEASE\n        //////////////////////////////////////////////////////////////*/\n\n        for (uint256 i = 0; i < orders.length; i++) {\n            IClearing(clearing).release(orders[i]);\n        }\n    }\n\n    function handleDeposit(\n        address from,\n        address token,\n        uint256 amount,\n        bytes memory extraData\n    ) external {}\n\n    function _execute(Instruction[] memory instructions) internal {\n        uint256 length = instructions.length;\n        for (uint256 i; i < length; i++) {\n            address to = instructions[i].to;\n            uint256 value = instructions[i].value;\n            bytes memory _data = instructions[i].data;\n\n            // If call to external function is not successful, revert\n            (bool success, ) = to.call{value: value}(_data);\n            require(success, \"Call to external function failed\");\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               MANAGEMENT\n    //////////////////////////////////////////////////////////////*/\n\n    function setNewManager(address _newManager) external {\n        require(manager == msg.sender, \"Only manager can call this function\");\n        manager = _newManager;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                  MISC\n    //////////////////////////////////////////////////////////////*/\n\n    fallback() external payable {}\n\n    receive() external payable {}\n}\n"},"contracts/interfaces/IZone.sol":{"content":"pragma solidity 0.8.24;\n\nimport {IClearing} from \"./IClearing.sol\";\n\ninterface IZone {\n    // @dev This function can be used to choose who can access an off-chain channel\n    // function verifyOwnership(\n    //     bytes32 data,\n    //     bytes memory signature\n    // ) external view returns (bool);\n\n    function name() external view returns (string memory);\n\n    function handleSettlement(\n        IClearing.SignedOrder[] memory orders,\n        bytes memory extraData\n    ) external;\n\n    function handleDeposit(\n        address from,\n        address token,\n        uint256 amount,\n        bytes memory extraData\n    ) external;\n}\n"},"contracts/interfaces/IClearing.sol":{"content":"pragma solidity 0.8.24;\n\ninterface IClearing {\n    /*//////////////////////////////////////////////////////////////\n                                STRUCTS\n    //////////////////////////////////////////////////////////////*/\n\n    struct Order {\n        address offerer;\n        address inputToken;\n        uint256 inputAmount;\n        address outputToken;\n        uint256 outputAmount;\n        address recipient;\n        // =====\n        address zone;\n        uint160 chainId;\n        uint32 startTime;\n        uint32 endTime;\n        // =====\n        bool toWithdraw;\n    }\n\n    struct SignedOrder {\n        Order order;\n        bytes extraData;\n        bytes signature;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Deposit(\n        address indexed from,\n        address indexed account,\n        address indexed token,\n        uint256 amount,\n        bytes extraData\n    );\n\n    event Withdraw(\n        address indexed from,\n        address indexed account,\n        address indexed token,\n        uint256 amount,\n        bytes extraData\n    );\n\n    event Transfer(\n        address indexed from,\n        address indexed account,\n        address indexed token,\n        uint256 amount,\n        bytes extraData\n    );\n\n    event Settled(\n        bytes32 indexed orderHash,\n        address indexed zone,\n        address indexed offerer,\n        Order order,\n        bytes extraData\n    );\n\n    event Cancelled(\n        bytes32 indexed orderHash,\n        address indexed zone,\n        address indexed offerer,\n        Order order,\n        bytes extraData\n    );\n\n    /*//////////////////////////////////////////////////////////////\n                                 FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function settle(\n        SignedOrder[] memory orders,\n        bytes memory extraData\n    ) external payable;\n\n    function deposit(\n        address account,\n        address token,\n        uint256 amount,\n        bytes memory extraData\n    ) external payable;\n\n    function move(\n        address to,\n        address token,\n        uint256 amount,\n        bytes memory extraData\n    ) external;\n\n    function withdraw(\n        address to,\n        address token,\n        uint256 amount,\n        bytes memory extraData\n    ) external;\n\n    function flash(\n        address recipient,\n        address token,\n        uint256 amount,\n        bytes memory userData,\n        bool receiveToken\n    ) external;\n\n    function cancel(SignedOrder memory signedOrder) external;\n\n    function escrow(SignedOrder memory signedOrder) external;\n\n    function release(SignedOrder memory signedOrder) external;\n\n    function balanceOf(\n        address account,\n        address token\n    ) external view returns (uint256);\n\n    function hasSettled(\n        address offerer,\n        bytes32 orderHash\n    ) external view returns (bool);\n}\n"},"contracts/libs/ClearingUtils.sol":{"content":"pragma solidity ^0.8.24;\n\nimport {IClearing} from \"../interfaces/IClearing.sol\";\nimport {SignatureChecker} from \"./SignatureChecker.sol\";\n\nlibrary ClearingUtils {\n    /*//////////////////////////////////////////////////////////////\n                               LIBRARIES\n    //////////////////////////////////////////////////////////////*/\n\n    using SignatureChecker for address;\n\n    /*//////////////////////////////////////////////////////////////\n                            ORDER VALIDATION\n    //////////////////////////////////////////////////////////////*/\n\n    function getOrderHash(\n        IClearing.Order memory order\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    order.offerer,\n                    order.inputToken,\n                    order.inputAmount,\n                    order.outputToken,\n                    order.outputAmount,\n                    order.recipient,\n                    // =====\n                    order.zone,\n                    order.chainId,\n                    order.startTime,\n                    order.endTime,\n                    // =====\n                    order.toWithdraw\n                )\n            );\n    }\n\n    function getSignatureMessage(\n        IClearing.SignedOrder memory signedOrder\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    getOrderHash(signedOrder.order),\n                    signedOrder.extraData\n                )\n            );\n    }\n\n    function verifyOrderSignature(\n        IClearing.SignedOrder memory signedOrder\n    ) internal view returns (bool) {\n        (uint8 v, bytes32 r, bytes32 s) = signatureIntoComponents(\n            signedOrder.signature\n        );\n\n        // Allow for signing by either standard compact-hashing (getSignatureMessage) or EIP-712 (TODO:)\n        bytes32 quickSignatureMessage = getSignatureMessage(signedOrder);\n\n        return\n            signedOrder.order.offerer.isValidSignatureNow(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19Ethereum Signed Message:\\n32\",\n                        quickSignatureMessage\n                    )\n                ),\n                abi.encodePacked(r, s, v)\n            ) ||\n            // TEMP: for orders with no extraData, allow for signing by orderHash\n            (signedOrder.extraData.length == 0 &&\n                signedOrder.order.offerer.isValidSignatureNow(\n                    keccak256(\n                        abi.encodePacked(\n                            \"\\x19Ethereum Signed Message:\\n32\",\n                            getOrderHash(signedOrder.order)\n                        )\n                    ),\n                    abi.encodePacked(r, s, v)\n                ));\n    }\n\n    function signatureIntoComponents(\n        bytes memory signature\n    ) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        if (v < 27) {\n            v += 27;\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          SEQUENCE VALIDATION\n    //////////////////////////////////////////////////////////////*/\n\n    function getSequenceMessage(\n        IClearing.SignedOrder[] memory signedOrders,\n        bytes memory extraData\n    ) internal pure returns (bytes32) {\n        bytes32[] memory orderHashes = new bytes32[](signedOrders.length);\n\n        for (uint i; i < signedOrders.length; i++) {\n            orderHashes[i] = getSignatureMessage(signedOrders[i]);\n        }\n\n        return keccak256(abi.encodePacked(orderHashes, extraData));\n    }\n\n    function verifySequenceSignature(\n        IClearing.SignedOrder[] memory signedOrders,\n        bytes memory extraData,\n        bytes memory signature,\n        address expectedSigner\n    ) internal view returns (bool) {\n        (uint8 v, bytes32 r, bytes32 s) = signatureIntoComponents(signature);\n        bytes32 quickSignatureMessage = getSequenceMessage(\n            signedOrders,\n            extraData\n        );\n\n        return\n            expectedSigner.isValidSignatureNow(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19Ethereum Signed Message:\\n32\",\n                        quickSignatureMessage\n                    )\n                ),\n                abi.encodePacked(r, s, v)\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                EIP-712\n    //////////////////////////////////////////////////////////////*/\n\n    function _eip712_ORDER_TYPE_HASH() internal pure returns (bytes32) {\n        return\n            keccak256(\n                \"Order(address offerer,address inputToken,uint256 inputAmount,address outputToken,uint256 outputAmount,address recipient,uint256 zone,uint160 chainId,uint32 startTime,uint32 endTime,bool toWithdraw)\"\n            );\n    }\n\n    function _eip712_hashOrder(\n        IClearing.Order memory order\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    _eip712_ORDER_TYPE_HASH(),\n                    order.offerer,\n                    order.inputToken,\n                    order.inputAmount,\n                    order.outputToken,\n                    order.outputAmount,\n                    order.recipient,\n                    order.zone,\n                    order.chainId,\n                    order.startTime,\n                    order.endTime,\n                    order.toWithdraw\n                )\n            );\n    }\n\n    function _eip712_SIGNEDORDER_TYPE_HASH() internal pure returns (bytes32) {\n        return keccak256(\"SignedOrder(Order order,bytes extraData)\");\n    }\n\n    function _eip712_hashSignedOrder(\n        IClearing.Order memory order,\n        bytes memory extraData\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(_eip712_SIGNEDORDER_TYPE_HASH(), order, extraData)\n            );\n    }\n\n    // TODO: add in domain fetch and digest creation\n}\n"},"contracts/libs/SignatureChecker.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity 0.8.24;\n\nimport {ECDSA} from \"./ECDSA.sol\";\nimport {IERC1271} from \"../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC-1271 signatures from smart contract wallets like\n * Argent and Safe Wallet (previously Gnosis Safe).\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC-1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(\n            hash,\n            signature\n        );\n        return\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC-1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) ==\n            bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"},"contracts/libs/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity 0.8.24;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (\n                address(0),\n                RecoverError.InvalidSignatureLength,\n                bytes32(signature.length)\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\n            hash,\n            signature\n        );\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs &\n                bytes32(\n                    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                );\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\n            hash,\n            r,\n            vs\n        );\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\n            hash,\n            v,\n            r,\n            s\n        );\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"},"contracts/interfaces/IERC1271.sol":{"content":"pragma solidity 0.8.24;\n\ninterface IERC1271 {\n    // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n    // bytes4 constant internal MAGICVALUE = 0x1626ba7e;\n\n    /**\n     * @dev Should return whether the signature provided is valid for the provided hash\n     * @param _hash      Hash of the data to be signed\n     * @param _signature Signature byte array associated with _hash\n     *\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(\n        bytes32 _hash,\n        bytes memory _signature\n    ) external view returns (bytes4 magicValue);\n}\n"}},"settings":{"remappings":["ds-test/=lib/ds-test/src/","solmate/=lib/solmate/src/","forge-std/=lib/forge-std/src/","transient-goodies/=lib/transient-goodies/src/","solady/=lib/solady/src/","create3-factory/=lib/create3-factory/"],"optimizer":{"enabled":true,"runs":1000000},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"cancun","viaIR":true,"libraries":{}}}
